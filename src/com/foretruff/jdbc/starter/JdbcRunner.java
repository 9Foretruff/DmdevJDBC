package com.foretruff.jdbc.starter;

import com.foretruff.jdbc.starter.util.ConnectionManager;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;


public class JdbcRunner {
    public static void main(String[] args) throws SQLException {
        Long flightId = 2L;
        var ticketsByFlightId = getTicketsByFlightId(flightId);
        System.out.println(ticketsByFlightId);

        System.out.println("-------");

        var localDateTime1 = LocalDateTime.of(2019, 12, 8, 12, 30);
        var localDateTime2 = LocalDateTime.of(2020, 10, 8, 12, 30);

        var flightBetween = getFlightBetween(localDateTime1, localDateTime2);
        System.out.println(flightBetween);

        System.out.println("-------");

        try {
            checkMetaData();
        }finally {
            ConnectionManager.closePool();
        }

    }

    private static void checkMetaData() throws SQLException {
        try (var connection = ConnectionManager.get()) {
            var metaData = connection.getMetaData();
            var catalogs = metaData.getCatalogs();
            while (catalogs.next()) {
                var catalog = catalogs.getString("TABLE_CAT");

                var schemas = metaData.getSchemas();
                while (schemas.next()) {
                    var schema = schemas.getString("TABLE_SCHEM");

                    var tables = metaData.getTables(catalog, schema, "%", new String[]{"TABLE"});
                    if (schema.equals("public")) {
                        while (tables.next()) {
                            System.out.println(tables.getString("TABLE_NAME"));
                            var columns = metaData.getColumns(catalog, schema, "%", null);

                            while (columns.next()) {
                                System.out.println(columns.getString("COLUMN_NAME"));
                            }

                        }
                    }
                }
            }
        }
    }

    private static List<Long> getFlightBetween(LocalDateTime start, LocalDateTime end) throws SQLException {
        String sql = """
                SELECT id
                FROM flight
                WHERE departure_date BETWEEN ? AND ?
                """;
        List<Long> result = new ArrayList<>();
        try (var connection = ConnectionManager.get();
             var preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setFetchSize(50);
            preparedStatement.setQueryTimeout(10);
            preparedStatement.setMaxRows(100);

            preparedStatement.setTimestamp(1, Timestamp.valueOf(start));
            preparedStatement.setTimestamp(2, Timestamp.valueOf(end));

            var resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                result.add(resultSet.getObject("id", Long.class));
            }

        }

        return result;

    }

    private static List<Long> getTicketsByFlightId(Long flightId) throws SQLException {
        String sql = """
                    SELECT id
                    FROM ticket
                    WHERE flight_id = ?
                """;
        List<Long> result = new ArrayList<>();
        try (var connection = ConnectionManager.get();
             var prepareStatement = connection.prepareStatement(sql)) {
            prepareStatement.setLong(1, flightId);

            var resultSet = prepareStatement.executeQuery();
            while (resultSet.next()) {
                result.add(resultSet.getObject("id", Long.class)); // null safe
            }

        }

        return result;

    }

}


//String sql = """
//                INSERT INTO info (data)
//                VALUES
//                ('autogenerated')
//                """;
//        try (var connection = ConnectionManager.open();
//var statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
//        System.out.println(connection.getSchema());
//        System.out.println(connection.getTransactionIsolation());
//
//var executeResult = statement.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);
//var generatedKeys = statement.getGeneratedKeys();
//            if (generatedKeys.next()){
//var generatedId = generatedKeys.getInt("id");
//                System.out.println(generatedId);
//            }
////            while (executeResult.next()) {
////                System.out.println(executeResult.getLong("id"));
////                System.out.println(executeResult.getString("passenger_no"));
////                System.out.println(executeResult.getBigDecimal("cost"));
//////                executeResult.previous();
//////                executeResult.afterLast();
////                System.out.println("----------------");
////            }
//                    }